# Титул

# Введение

# Что такое Retina-Net?

# Что такое DOTA?

# 1 - этап:

Мы адаптировали базу DOTA под стандартную Retinanet

Входные данные для Retinanet должны быть в виде:
/data/imgs/img_001.jpg,837,346,981,456,cow
/data/imgs/img_002.jpg,215,312,279,391,cat
/data/imgs/img_002.jpg,22,5,89,84,bird
/data/imgs/img_003.jpg,,,,,

Но DOTA  для каждого отдельного изображения имеет аннотацию вида:
imagesource:GoogleEarth
gsd:0.146343590398
730 3076 727 3049 803 3044 806 3073 ship 0
805 3074 804 3095 397 3088 397 3070 harbor 0
670 2603 671 2581 735 2583 736 2607 ship 0
964 1661 969 1640 1069 1661 1063 1683 ship 0

Был дописан скрипт, который адаптирует DOTA под нашу сеть, а именно:
1 - Удаляет первые две строчки каждого файла
2 - Удаляет последний скор в изображении
3 - Удаляет объекты которые плохо видно на изображении
4 - Режет изображения на части 1000px*1000px с шагом 900px (имеем пересечение изображений в 100px) при этом крайние
части меньшие чем 1000px*1000px дополняются черным фоном до нужного размера.
5 - Так как в DOTA объект может быть задан любым четырехугольником (задается 4 точками), а нам для retina net нужен
прямоугольник(задается 2 точками), для этого нам нужны точки:
xm = min (x1, x2, x3, x4)
ym = min ( y1, y2, y3, y4)
xM = max (x1, x2, x3, x4)
yM = max ( y1, y2, y3, y4)
6 -  Формирует новый общий для всех CSV:
Записывает путь до текущего файла
Полученные координаты
Класс

# ЛИСТИНГ - crop.py

# 2 - этап:

Обучаем retinanet на обработанных через скрипт данных.

Гиперпараметры при обучении:
--backbone resnet50 - каркас сети детектора
--epochs 30 - количество эпох
—snapshot-path /путь, куда сохраняются веса/
csv  /путь до файла annotation.csv/ /путь до файла map.csv/

Обучение производилось на сервере с GPU NVidia 1060 (6Gb)

30 эпох, каждая эпоха обучалась по ? минут.

Веса сети, подобранные в процессе обучения занимают в среднем 430мб.

После тестов на обучающей выборке получили следующие данные:

# TABLE - table-1.png

# PLOT - plot-1.png